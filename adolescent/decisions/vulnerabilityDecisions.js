import {complicationsBuilder as ComplicationsBuilder, RuleCondition} from "rules-config/rules";
import lib from '../../lib';
import _ from 'lodash'

const encounterDecisions = (programEnrolment, programEncounter) => {

    const vulnerabilitiesDecisionsBuilder = new VulnerabilitiesDecisionsBuilder(programEnrolment, programEncounter);


    function analyseForSchoolDropoutVulnerability() {
        if (new RuleCondition({programEncounter: programEncounter})
                .when.latestValueInEntireEnrolment("School going").containsAnyAnswerConceptName("Dropped Out").matches())
            return;

        vulnerabilitiesDecisionsBuilder.schoolDropoutVulnerabilityReasons.addComplication("No Parents / Single Parent")
            .when.valueInEncounter("Parents' life status").containsAnyAnswerConceptName("Only Father Alive", "Only Mother Alive", "Both Expired", "Separated");

        vulnerabilitiesDecisionsBuilder.schoolDropoutVulnerabilityReasons.addComplication("Menstrual Disorder")
            .when.valueInEncounter("Menstrual disorders").containsAnyAnswerConceptName("Lower abdominal pain", "Backache",
            "Leg pain", "Nausea and vomiting", "Headache", "Abnormal vaginal discharge", "Heavy bleeding", "Irregular menses")
            .and.when.valueInEncounter("Does she remain absent during menstruation?").containsAnswerConceptName("Yes");

        vulnerabilitiesDecisionsBuilder.schoolDropoutVulnerabilityReasons.addComplication("Severe Anemia")
            .when.valueInEncounter("Hb").lessThanOrEqualTo(10);

        let bmi = programEncounter.getObservationValue("BMI");
        vulnerabilitiesDecisionsBuilder.schoolDropoutVulnerabilityReasons.addComplication("Malnutrition")
            .whenItem(bmi).lessThan(18.5);

        vulnerabilitiesDecisionsBuilder.severeMalnourishement.addComplication("Yes")
            .whenItem(bmi).lessThan(14.5);

        vulnerabilitiesDecisionsBuilder.schoolDropoutVulnerabilityReasons.addComplication("Sickle Cell Anemia")
            .when.valueInEncounter("Sickling Test Result").containsAnyAnswerConceptName("Trait", "Disease");
    }

    function analyseForAddictionVulnerability() {

        vulnerabilitiesDecisionsBuilder.addictionVulnerabilityReasons.addComplication("Parents' Addiction")
            .when.valueInEncounter("Father's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco")
            .and.valueInEncounter("Mother's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco");

        vulnerabilitiesDecisionsBuilder.addictionVulnerabilityReasons.addComplication("Friends Addiction")
            .when.valueInEncounter("Are friends addicted?").containsAnyAnswerConceptName("Yes");

        vulnerabilitiesDecisionsBuilder.addictionVulnerabilityReasons.addComplication("Self Addiction")
            .when.valueInEncounter("Addiction Details").containsAnyAnswerConceptName("Alcohol", "Tobacco", "Both");
    }

    function analyseForEarlyMarriageVulnerability() {
        vulnerabilitiesDecisionsBuilder.earlyMarriageVulnerabilityReasons.addComplication("School dropped out")
            .when.valueInEncounter("School going").containsAnyAnswerConceptName("Dropped Out");
    }

    function analyseForEarlyPregnancyVulnerability() {
        vulnerabilitiesDecisionsBuilder.earlyPregnancyVulnerabilityReasons.addComplication("Sexually active")
            .when.female.and.valueInEncounter("Sexually active").containsAnyAnswerConceptName("Yes");
    }

    function analyseForRoadTrafficAccidentVulnerability() {
        vulnerabilitiesDecisionsBuilder.roadTrafficAccidentVulnerabilityReasons.addComplication("Driving Vehicle")
            .when.valueInEncounter("Drives 2 wheeler").containsAnyAnswerConceptName("Yes");
    }

    function combineDecision(enrolmentDecisions, encounterDecisions, concept) {
        let vulnerabilitiesFromEnrolment = lib.C.findValue(enrolmentDecisions, concept);
        let vulnerabilitiesFromEncounter = lib.C.findValue(encounterDecisions, concept);
        vulnerabilitiesFromEnrolment = _.isEmpty(vulnerabilitiesFromEnrolment) ? [] : vulnerabilitiesFromEnrolment;
        vulnerabilitiesFromEncounter = _.isEmpty(vulnerabilitiesFromEncounter) ? [] : vulnerabilitiesFromEncounter;
        const vulnerability = _.uniq(_.concat(vulnerabilitiesFromEnrolment, vulnerabilitiesFromEncounter));
        return {name: concept, value: vulnerability};
    }

    function combineVulnerabilityDecisions(enrolmentDecisions, encounterDecisions) {
        return [
            'Adolescent Vulnerabilities',
            'Reason for School Dropout Vulnerability',
            'Reason for Addiction Vulnerability',
            'Reason for Early Marriage Vulnerability',
            'Reason for Early Pregnancy & RTI Vulnerability',
            'Reason for Road Traffic Accident Vulnerability'
        ].map(vulnerability => combineDecision(enrolmentDecisions, encounterDecisions, vulnerability))
            .filter(decision => !_.isEmpty(decision));
    }

    analyseForSchoolDropoutVulnerability();
    analyseForAddictionVulnerability();
    analyseForEarlyMarriageVulnerability();
    analyseForEarlyPregnancyVulnerability();
    analyseForRoadTrafficAccidentVulnerability();

    let concatenatedEnrolmentDecisions = combineVulnerabilityDecisions([], vulnerabilitiesDecisionsBuilder.decisions());
    return {
        enrolmentDecisions: concatenatedEnrolmentDecisions,
        encounterDecisions: vulnerabilitiesDecisionsBuilder.decisions(),
        registrationDecisions: []
    };
};

class VulnerabilitiesDecisionsBuilder {

    constructor(programEnrolment, programEncounter) {
        this.vulnerabilities = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Adolescent Vulnerabilities');
        this.schoolDropoutVulnerabilityReasons = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Reason for School Dropout Vulnerability');
        this.addictionVulnerabilityReasons = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Reason for Addiction Vulnerability');
        this.earlyMarriageVulnerabilityReasons = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Reason for Early Marriage Vulnerability');
        this.earlyPregnancyVulnerabilityReasons = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Reason for Early Pregnancy & RTI Vulnerability');
        this.roadTrafficAccidentVulnerabilityReasons = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Reason for Road Traffic Accident Vulnerability');
        this.severeMalnourishement = VulnerabilitiesDecisionsBuilder.builderFor(programEnrolment, programEncounter, 'Is she/he severely malnourished?');
        this.computedValues = [];
    }

    static builderFor(programEnrolment, programEncounter, complicationsConcept) {
        return new ComplicationsBuilder({
            programEnrolment: programEnrolment,
            programEncounter: programEncounter,
            complicationsConcept: complicationsConcept
        });
    }

    decisions() {
        let decisions = [];

        this.addVulnerabilitiesBasedOnReasons();

        decisions.push(this.vulnerabilities.getComplications());

        this.addDecisionsForReasons(decisions);
        decisions = decisions.concat(this.computedValues);
        return decisions;
    }

    addDecisionsForReasons(decisions) {
        decisions.push(this.schoolDropoutVulnerabilityReasons.getComplications());
        decisions.push(this.addictionVulnerabilityReasons.getComplications());
        decisions.push(this.earlyMarriageVulnerabilityReasons.getComplications());
        decisions.push(this.earlyPregnancyVulnerabilityReasons.getComplications());
        decisions.push(this.roadTrafficAccidentVulnerabilityReasons.getComplications());
        decisions.push(this.severeMalnourishement.getComplications());
    }

    addVulnerabilitiesBasedOnReasons() {
        if (this.schoolDropoutVulnerabilityReasons.hasComplications())
            this.vulnerabilities.addComplication("School dropout");
        if (this.addictionVulnerabilityReasons.hasComplications())
            this.vulnerabilities.addComplication("Addiction");
        if (this.earlyMarriageVulnerabilityReasons.hasComplications())
            this.vulnerabilities.addComplication("Early Marriage");
        if (this.earlyPregnancyVulnerabilityReasons.hasComplications())
            this.vulnerabilities.addComplication("Early Pregnancy & RTI");
        if (this.roadTrafficAccidentVulnerabilityReasons.hasComplications())
            this.vulnerabilities.addComplication("Road Traffic Accident");
    }
}


export {encounterDecisions}